[{"F:\\web36\\unit4\\frontendTechStuff\\frontend\\src\\index.js":"1","F:\\web36\\unit4\\frontendTechStuff\\frontend\\src\\pages\\profilepage\\CreateItem.js":"2","F:\\web36\\unit4\\frontendTechStuff\\frontend\\src\\pages\\homepage\\Description.js":"3"},{"size":877,"mtime":1612225717376,"results":"4","hashOfConfig":"5"},{"size":5674,"mtime":1612419349459,"results":"6","hashOfConfig":"5"},{"size":1011,"mtime":1612418763313,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1in1c1h",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\web36\\unit4\\frontendTechStuff\\frontend\\src\\index.js",[],"F:\\web36\\unit4\\frontendTechStuff\\frontend\\src\\pages\\profilepage\\CreateItem.js",["15","16"],"//NEEDS REFACTORING\n\n//imports\nimport React, { useState, useEffect } from \"react\";\nimport * as yup from \"yup\";\nimport axios from \"axios\";\nimport styled from 'styled-components';\n\n//formSchema\nconst formSchema = yup.object().shape({\n    name: yup.string().required(\"Name is required\"),\n    image_url: yup.string().required(\"Image url is required\"),\n    category: yup.string().required(\"Category is required\"),\n    information: yup.string()\n})\n\nconst CreateItem = props => {\n\n    const initialData = {\n        name: \"\",\n        image_url: \"\",\n        category: \"\",\n        information: \"\"\n    }\n\n    const [data, setData] = useState([initialData]);\n    const [formState, setFormState] = useState(initialData);\n    const [buttonDisabled, setButtonDisabled] = useState(true);\n\n    //disable submit unless proper fields are filled\n    useEffect(() => {\n        formSchema.isValid(formState).then(valid => {\n            setButtonDisabled(!valid);\n            if (formState.category === \"null\")\n                setButtonDisabled(true);\n        });\n    }, [formState]);\n\n    //errorState\n    const [errorState, setErrorState] = useState({\n        name: \"\",\n        image_url: \"\",\n        category: \"\"\n    });\n\n    //formSubmit\n    const formSubmit = (e) => {\n        e.preventDefault(); //don't reload when we submit\n        console.log(\"Form submitted!\");\n        axios\n            .post(\"https://reqres.in/api/electronics\", formState)\n            .then(res => {\n                console.log(res.data);\n                setData(res.data);\n            })\n            .catch(err => console.log(err))\n        setFormState(initialData); //reset fields after we submit\n    }\n\n    //validation\n    const validate = e => {\n        let value = e.target.type === \"checkbox\" ? e.target.checked : e.target.value; //checkbox validation\n        yup\n            .reach(formSchema, e.target.name)\n            .validate(e.target.value)\n            .then(valid => {\n                setErrorState({ ...errorState, [e.target.name]: \"\" })\n            })\n            .catch(err => {\n                setErrorState({\n                    ...errorState,\n                    [e.target.name]: err.errors[0]\n                })\n            })\n    }\n\n    //inputChange\n    const inputChange = (e) => {\n        e.persist(); //don't reload when input is changed\n        validate(e);\n\n        let value = e.target.type === \"checkbox\" ? e.target.checked : e.target.value; //checkbox input\n        setFormState({ ...formState, [e.target.name]: value });\n    }\n\n    return (\n        <StyledDiv className=\"form-container\">\n            <h1 className=\"create-item-title\">Add Your Electronic</h1>\n            <form onSubmit={formSubmit}>\n                <label htmlFor=\"name\">\n                    <h1>\n                        Item Name\n                    </h1>\n                    <StyledInput name='name' type='text' value={formState.name} onChange={inputChange} />\n                </label>\n                {errorState.name ? <span className=\"error\">{errorState.name}</span> : null}\n                <label htmlFor=\"image_url\">\n                    <h1>\n                        Image URL\n                    </h1>\n                    <StyledInput name='image_url' type='text' value={formState.image_url} onChange={inputChange} />\n                </label>\n                {errorState.image_url ? <span className=\"error\">{errorState.image_url}</span> : null}\n                <label htmlFor=\"categories\">\n                    <h1>\n                        Category:\n                    </h1>\n                    <StyledSelect name=\"category\" id=\"category\" value={formState.category} onChange={inputChange}>\n                        <option defaultValue value=\"null\">--pick a category--</option>\n                        <option value=\"computers\">Computers</option>\n                        <option value=\"video\">Video</option>\n                        <option value=\"audio\">Audio</option>\n                        <option value=\"gaming\">Gaming</option>\n                    </StyledSelect>\n                </label>\n                {errorState.category ? <span className=\"error\">{errorState.category}</span> : null}\n                <label htmlFor=\"information\">\n                    <h1>\n                        Info:\n                    </h1>\n                    <textarea name=\"information\" id=\"information\" value={formState.information} onChange={inputChange} />\n                </label>\n                <button disabled={buttonDisabled}>Submit</button>\n            </form>\n        </StyledDiv>\n    )\n}\n\nconst StyledDiv = styled.div`\nbutton {\n    border: 2px solid white;\n    border-radius: 50px;\n    width: 20vw;\n    margin-top: 25px;\n    padding: 1%;\n}\n\nbutton:hover {\n  background-image: none;\n  background-color: #CCC;\n  border: 2px solid #CCC;\n  box-shadow: 0 5px 12px rgba(0, 0, 0, 0.1);\n}\n\nbutton:disabled {\n  background-image: none;\n  background-color: white;\n  border: 2px solid rgba(0, 0, 0, 0.1);\n  text-shadow: none;\n}\n\nform {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color: #4267B2;\n    width: 60%;\n    margin: 4% auto;\n    padding: 4% 0%;\n    border-radius: 50px;\n}\n\nh1 {\n    text-align: center;\n    font-size: 2rem;\n}\n\n.error {\n    color: white;\n}\n\n.create-item-title {\n    font-size: 3rem;\n}\n\ntextarea {\n  border: 2px solid white;\n  width: 30vw;\n  height: 10vw;\n  margin: 1.2% auto;\n  padding: 1.4%;\n}\n\n`\nconst StyledSelect = styled.select`\nborder: 2px solid white;\nwidth: 30vw;\nmargin: 1.2% auto;\npadding: 1.4%;\n`\nconst StyledInput = styled.input`\nborder: 2px solid white;\nborder-radius: 50px;\nwidth: 30vw;\nmargin: 1.2% auto;\npadding: 1.4%;\n`\n\nexport default CreateItem;","F:\\web36\\unit4\\frontendTechStuff\\frontend\\src\\pages\\homepage\\Description.js",[],{"ruleId":"17","severity":1,"message":"18","line":26,"column":12,"nodeType":"19","messageId":"20","endLine":26,"endColumn":16},{"ruleId":"17","severity":1,"message":"21","line":62,"column":13,"nodeType":"19","messageId":"20","endLine":62,"endColumn":18},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'value' is assigned a value but never used."]
